{"version":3,"sources":["components/ToDoTemplate.js","ToDoContext.js","components/ToDoHead.js","components/ToDoItem.js","components/ToDoList.js","components/ToDoCreate.js","App.js","index.js"],"names":["ToDoTemplateBlock","styled","div","ToDoTemplate","children","initialTodos","JSON","parse","localStorage","getItem","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","ToDoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","useContext","useTodoDispatch","ToDoHeadBlock","ToDoHead","today","Date","dateString","toLocaleString","year","month","day","dayName","weekday","undoneTasks","className","length","CheckCircle","props","css","Text","Remove","ToDoItemBlock","React","memo","onClick","ToDoListBlock","ToDoList","todos","useEffect","setItem","stringify","todoLS","key","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","autoFocus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc182201.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ToDoTemplateBlock = styled.div`\n    width: 512px;\n    height: 768px;\n\n    position: relative;\n    background: white;\n    border-radius: 16px;\n    box-shadow: 0 0 8px rgba(0,0,0,0.04);\n    margin: 0 auto;\n    margin-top: 96px;\n    margin-bottom: 32px;\n\n    display: flex;\n    flex-direction: column;\n`;\n\n//chidren 컴포넌트들을 화면에 보이도록 하기\n\nfunction ToDoTemplate({ children }) {\n  return (\n    <ToDoTemplateBlock> \n      { children }  \n    </ToDoTemplateBlock>\n  );\n}\nexport default ToDoTemplate;","import React, { useReducer , createContext , useContext , useRef } from 'react';\n\n//로컬스토리지에 값이 있으면 get으로 가져오고, 없으면 디폴트값으로 리스트 넣어주기\nconst initialTodos = JSON.parse(localStorage.getItem('todoLS')) || \n    [\n      {\n        id: 1,\n        text: '운동하기',\n        done: true\n      },\n      {\n        id: 2,\n        text: '뉴스 읽기',\n        done: true\n      },\n      {\n        id: 3,\n        text: '저녁 약속 가기',\n        done: false\n      },\n      {\n        id: 4,\n        text: '리액트 공부하기',\n        done: false\n      }\n    ];\n  \n\n  //next state를 리턴해주는 함수 => CREATE, TOGGLE, REMOVE\n  function todoReducer(state, action) {\n\n    switch (action.type) {\n        case 'CREATE':\n          return state.concat(action.todo);\n        case 'TOGGLE':\n          return state.map(todo =>\n            todo.id === action.id ? { ...todo, done: !todo.done } : todo\n          );\n        case 'REMOVE':\n          return state.filter(todo => todo.id !== action.id);\n        default:\n          throw new Error(`Unhandled action type: ${action.type}`);\n      }\n  }\n\n\n  //context API\n  const TodoStateContext = createContext(null);\n  const TodoDispatchContext = createContext(null);\n  const TodoNextIdContext = createContext(null);\n\n  //context API provider사용할 수 있는 컴포넌트\n  export function ToDoProvider({children}){\n      const [state, dispatch] = useReducer(todoReducer, initialTodos);\n      const nextId = useRef(5);\n\n      return (\n          <TodoStateContext.Provider value={state}>\n              <TodoDispatchContext.Provider value={dispatch}>\n                  <TodoNextIdContext.Provider value={nextId}>\n                  {children}\n                  </TodoNextIdContext.Provider>\n              </TodoDispatchContext.Provider>\n          </TodoStateContext.Provider>\n      );\n  }\n\n  //custom HOOK : 다른 컴포넌트에서 쉽게 불러와서 사용할 수 있도록 하기\n  export function useTodoState() {\n    const context = useContext(TodoStateContext);\n    if(!context) {\n      throw new Error('Cannot find TodoStateContext')\n    }\n      return useContext(TodoStateContext);\n  }\n\n  export function useTodoDispatch() {\n    const context = useContext(TodoDispatchContext);\n    if(!context) {\n      throw new Error('Cannot find TodoDispatchContext')\n    }\n      return useContext(TodoDispatchContext);\n  }\n\n  export function useTodoNextId() {\n    const context = useContext(TodoNextIdContext);\n    if(!context) {\n      throw new Error('Cannot find TodoNextIdContext')\n    }\n    return useContext(TodoNextIdContext);\n  }","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../ToDoContext';\n\nconst ToDoHeadBlock = styled.div`\n  h1 {\n    margin: 0;\n    font-size: 36px;\n    color: #343a40;\n  }\n  .day {\n    margin-top: 4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n  .tasks-left {\n    color: #20c997;\n    font-size: 18px;\n    margin-top: 40px;\n    font-weight: bold;\n  }\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n`;\n\nfunction ToDoHead() {\n  const today = new Date();\n  const dateString = today.toLocaleString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  const dayName = today.toLocaleString('ko-KR', { weekday: 'long' });\n\n  const todos = useTodoState();\n  const undoneTasks = todos.filter(todo => todo.done === false);\n\n  return (\n    <ToDoHeadBlock>\n      <h1>{dateString}</h1>\n      <div className=\"day\">{dayName}</div>\n      <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\n    </ToDoHeadBlock>\n  );\n}\nexport default ToDoHead;","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTodoDispatch } from '../ToDoContext';\n\n\nconst CheckCircle = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${props =>\n    props.done &&\n    css`\n      border: 1px solid #38d9a9;\n      color: #38d9a9;\n    `}\n`;\n\n//line19 : css 여러줄 내부에서 사용할땐 css import하고 사용\n//line 54 : hover일 때 remove컴포넌트 불투명도 1로 만들어주는 코드\n\nconst Text = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${props =>\n    props.done &&\n    css`\n      color: #ced4da;\n      text-decoration:line-through;\n    `};\n`;\n\nconst Remove = styled.div`\n  opacity: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  };\n`;\n\nconst ToDoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      opacity: 1;\n    }\n  }\n`;\n\nfunction ToDoItem({ id, done, text }) {\n  const dispatch = useTodoDispatch();\n\n  const onToggle = () => {\n    dispatch({\n      type: 'TOGGLE',\n      id\n    });\n  };\n\n  const onRemove = () => {\n    dispatch({\n      type: 'REMOVE',\n      id\n    });\n  };\n\n\n  return (\n    <ToDoItemBlock>\n        <CheckCircle onClick={onToggle} done={done}>\n            {done && <MdDone />}\n        </CheckCircle>\n        <Text done={done}>{text}</Text>\n        <Remove onClick={onRemove}>\n            <MdDelete />\n        </Remove>\n    </ToDoItemBlock>\n  );\n}\n\n\nexport default React.memo(ToDoItem);\n","import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport ToDoItem from './ToDoItem';\nimport { useTodoState } from '../ToDoContext';\n\nconst ToDoListBlock = styled.div`\n    flex: 1; \n    padding: 20px 32px;\n    padding-bottom: 48px;\n    overflow-y: auto;\n`;\n\n//line7 : 부모 컴포넌트 컨텐츠 전체 차지\n//line10 : 항목 많아지면 스크롤바 자동생성\n\nfunction ToDoList() {\n  const todos = useTodoState();\n\n  useEffect(() => {localStorage.setItem(\"todoLS\", JSON.stringify(todos))\n  },[todos]);\n\n  useEffect(() => {\n      localStorage.todoLS = JSON.stringify(todos);\n  },[todos]);\n\n  return (\n    <ToDoListBlock>\n      {todos.map(todo => (\n        <ToDoItem\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n          key={todo.id}\n        />\n      ))}\n    </ToDoListBlock>\n  );\n}\n\nexport default ToDoList;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoNextId , useTodoDispatch } from '../ToDoContext';\n\n\n\nconst CircleButton = styled.button`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n  }\n  &:active {\n    background: #20c997;\n  }\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  z-index: 5;\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  font-size: 60px;\n\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n \n  transition: 0.125s all ease-in;\n  ${props =>\n    props.open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg);\n    `}\n`;\n\n//line18: 요소 배치 수직 순서 결정\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\n\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding-left: 32px;\n  padding-top: 32px;\n  padding-right: 32px;\n  padding-bottom: 72px;\n\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`;\n\n\nfunction ToDoCreate() {\n    const [open, setOpen] = useState(false);\n    const [value, setValue] = useState('');\n    const dispatch = useTodoDispatch();\n    const nextId = useTodoNextId();\n\n    const onToggle = () => setOpen(!open);\n    const onChange = e => setValue(e.target.value);\n    const onSubmit = e => {\n      e.preventDefault();\n      dispatch({\n        type: 'CREATE',\n        todo: {\n          id: nextId.current,\n          text: value,\n          done: false\n        }\n      });\n      nextId.current += 1;\n      setOpen(false);\n      setValue('');\n    };\n    return (\n        <>\n        {open && (\n            <InsertFormPositioner>\n                <InsertForm onSubmit={onSubmit}>\n                    <Input\n                    autoFocus\n                    placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\n                    onChange={onChange}\n                    value={value}\n                    ></Input>\n                </InsertForm>\n            </InsertFormPositioner>\n        )}\n        <CircleButton onClick={onToggle} open={open}>\n            <MdAdd />      \n        </CircleButton>\n        </>\n    );\n}\n\nexport default React.memo(ToDoCreate);","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport ToDoTemplate from './components/ToDoTemplate'\nimport ToDoHead from './components/ToDoHead';\nimport ToDoList from './components/ToDoList';\nimport ToDoCreate from './components/ToDoCreate';\nimport { ToDoProvider} from './ToDoContext';\n\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\n\nfunction App() {\n\n  return (\n    <ToDoProvider>\n      <GlobalStyle />\n      <ToDoTemplate>\n        <ToDoHead />\n        <ToDoList />\n        <ToDoCreate />\n      </ToDoTemplate>\n    </ToDoProvider>\n  );\n}\n\n//context API 사용하기위해 ToDoProvider로 감싸준다\n//chidren 최대한 안쓰고 각 컴포넌트로 관리 \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}