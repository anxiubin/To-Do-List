{"version":3,"sources":["components/ToDoTemplate.js","ToDoContext.js","components/ToDoHead.js","components/ToDoItem.js","components/ToDoList.js","components/ToDoCreate.js","App.js","index.js"],"names":["ToDoTemplateBlock","styled","div","ToDoTemplate","children","initialTodos","JSON","parse","localStorage","getItem","id","text","done","filterType","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","ToDoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","useContext","useTodoDispatch","ToDoHeadBlock","ToDoHead","today","Date","dateString","toLocaleString","year","month","day","dayName","weekday","todos","undoneTasks","useEffect","setItem","className","length","onClick","CheckCircle","props","css","Text","Remove","ToDoItemBlock","React","memo","ToDoListBlock","ToDoList","stringify","todoLS","newTodo","key","renderTodoList","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","autoFocus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8332baa.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ToDoTemplateBlock = styled.div`\r\n    width: 512px;\r\n    height: 768px;\r\n\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px rgba(0,0,0,0.04);\r\n    margin: 0 auto;\r\n    margin-top: 96px;\r\n    margin-bottom: 32px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\n//chidren 컴포넌트들을 화면에 보이도록 하기\r\n\r\nfunction ToDoTemplate({ children }) {\r\n  return (\r\n    <ToDoTemplateBlock> \r\n      { children }  \r\n    </ToDoTemplateBlock>\r\n  );\r\n}\r\nexport default ToDoTemplate;","import React, { useReducer , createContext , useContext , useRef } from 'react';\r\n\r\n//로컬스토리지에 값이 있으면 get으로 가져오고, 없으면 디폴트값으로 리스트 넣어주기\r\nconst initialTodos = JSON.parse(localStorage.getItem('todoLS')) || \r\n    [\r\n      {\r\n        id: 1,\r\n        text: '운동하기',\r\n        done: true,\r\n        filterType: false\r\n      },\r\n      {\r\n        id: 2,\r\n        text: '뉴스 읽기',\r\n        done: true,\r\n        filterType: false\r\n      },\r\n      {\r\n        id: 3,\r\n        text: '저녁 약속 가기',\r\n        done: false,\r\n        filterType: false\r\n      },\r\n      {\r\n        id: 4,\r\n        text: '리액트 공부하기',\r\n        done: false,\r\n        filterType: false\r\n      }\r\n    ];\r\n  \r\n\r\n  //next state를 리턴해주는 함수 => CREATE, TOGGLE, REMOVE\r\n  function todoReducer(state, action) {\r\n\r\n    switch (action.type) {\r\n        case 'CREATE':\r\n          return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n          return state.map(todo =>\r\n            todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n          );\r\n        case 'REMOVE':\r\n          return state.filter(todo => todo.id !== action.id);\r\n        case 'ORIGIN':\r\n          return state.map(todo=>\r\n            todo.filterType === true ? {...todo, filterType: false} : todo);\r\n        case 'UNDONE':\r\n            return state.map(todo=>\r\n              todo.done === false ? {...todo, filterType: true} : {...todo, filterType: false});\r\n        case 'DONE':\r\n            return state.map(todo=>\r\n              todo.done === true ? {...todo, filterType: true} : {...todo, filterType: false});\r\n        default:\r\n          throw new Error(`Unhandled action type: ${action.type}`);\r\n      }\r\n  }\r\n\r\n\r\n  //context API\r\n  const TodoStateContext = createContext(null);\r\n  const TodoDispatchContext = createContext(null);\r\n  const TodoNextIdContext = createContext(null);\r\n\r\n  //context API provider사용할 수 있는 컴포넌트\r\n  export function ToDoProvider({children}){\r\n      const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n      const nextId = useRef(5);\r\n\r\n      return (\r\n          <TodoStateContext.Provider value={state}>\r\n              <TodoDispatchContext.Provider value={dispatch}>\r\n                  <TodoNextIdContext.Provider value={nextId}>\r\n                  {children}\r\n                  </TodoNextIdContext.Provider>\r\n              </TodoDispatchContext.Provider>\r\n          </TodoStateContext.Provider>\r\n      );\r\n  }\r\n\r\n  //custom HOOK : 다른 컴포넌트에서 쉽게 불러와서 사용할 수 있도록 하기\r\n  export function useTodoState() {\r\n    const context = useContext(TodoStateContext);\r\n    if(!context) {\r\n      throw new Error('Cannot find TodoStateContext')\r\n    }\r\n      return useContext(TodoStateContext);\r\n  }\r\n\r\n  export function useTodoDispatch() {\r\n    const context = useContext(TodoDispatchContext);\r\n    if(!context) {\r\n      throw new Error('Cannot find TodoDispatchContext')\r\n    }\r\n      return useContext(TodoDispatchContext);\r\n  }\r\n\r\n  export function useTodoNextId() {\r\n    const context = useContext(TodoNextIdContext);\r\n    if(!context) {\r\n      throw new Error('Cannot find TodoNextIdContext')\r\n    }\r\n    return useContext(TodoNextIdContext);\r\n  }","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState, useTodoDispatch } from '../ToDoContext';\r\nimport { IoIosListBox } from \"react-icons/io\";\r\nimport { MdIndeterminateCheckBox, MdCheckBox } from \"react-icons/md\";\r\n\r\n\r\nconst ToDoHeadBlock = styled.div`\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n  .tasks-left {\r\n    color: #20c997;\r\n    font-size: 18px;\r\n    margin-top: 10px;\r\n    font-weight: bold;\r\n    float: left;\r\n  }\r\n  .origin-list {\r\n    color: #20c997;\r\n    font-size: 24px;\r\n    margin-top: 10px;\r\n    float: right;\r\n  }\r\n  .filteredUndone {\r\n    color: #20c997;\r\n    font-size: 24px;\r\n    margin-top: 10px;\r\n    float: right;\r\n  }\r\n  .filteredDone {\r\n    color: #20c997;\r\n    font-size: 24px;\r\n    margin-top: 10px;\r\n    float: right;\r\n  }\r\n  padding-top: 48px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n`;\r\n\r\n\r\nfunction ToDoHead() {\r\n  const today = new Date();\r\n  const dateString = today.toLocaleString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n  const dayName = today.toLocaleString('ko-KR', { weekday: 'long' });\r\n\r\n  const todos = useTodoState();\r\n  const dispatch = useTodoDispatch();\r\n  const undoneTasks = todos.filter(todo => todo.done === false);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"FilteredLS\", 'ORIGIN');\r\n  }, []);\r\n\r\n  const setORIGIN = () => {\r\n    localStorage.setItem(\"FilteredLS\", 'ORIGIN');\r\n    dispatch({\r\n      type: 'ORIGIN',\r\n    });\r\n  };\r\n  const setUNDONE = () => {\r\n    localStorage.setItem(\"FilteredLS\", 'UNDONE');\r\n    dispatch({\r\n      type: 'UNDONE',\r\n    });\r\n  };\r\n  const setDONE = () => {\r\n    localStorage.setItem(\"FilteredLS\", 'DONE');\r\n    dispatch({\r\n      type: 'DONE',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ToDoHeadBlock>\r\n      <h1>{dateString}</h1>\r\n      <div className=\"day\">{dayName}</div>\r\n      <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n      <div className=\"filteredDone\" onClick={setDONE} >\r\n        <MdCheckBox />\r\n      </div>\r\n      <div className=\"filteredUndone\" onClick={setUNDONE} >\r\n        <MdIndeterminateCheckBox />\r\n      </div>\r\n      <div className=\"origin-list\" onClick={setORIGIN}>\r\n        <IoIosListBox />\r\n      </div>\r\n    </ToDoHeadBlock>\r\n  );\r\n}\r\nexport default ToDoHead;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useTodoDispatch } from '../ToDoContext';\r\n\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 16px;\r\n  border: 1px solid #ced4da;\r\n  font-size: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${props =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #38d9a9;\r\n      color: #38d9a9;\r\n    `}\r\n`;\r\n\r\n//line19 : css 여러줄 내부에서 사용할땐 css import하고 사용\r\n//line 54 : hover일 때 remove컴포넌트 불투명도 1로 만들어주는 코드\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color: #495057;\r\n  ${props =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n      text-decoration:line-through;\r\n    `};\r\n`;\r\n\r\nconst Remove = styled.div`\r\n  opacity: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  };\r\n`;\r\n\r\nconst ToDoItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  &:hover {\r\n    ${Remove} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction ToDoItem({ id, done, text }) {\r\n  const dispatch = useTodoDispatch();\r\n\r\n  const onToggle = () => {\r\n    dispatch({\r\n      type: 'TOGGLE',\r\n      id\r\n    });\r\n  };\r\n\r\n  const onRemove = () => {\r\n    dispatch({\r\n      type: 'REMOVE',\r\n      id\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <ToDoItemBlock>\r\n        <CheckCircle onClick={onToggle} done={done}>\r\n            {done && <MdDone />}\r\n        </CheckCircle>\r\n        <Text done={done}>{text}</Text>\r\n        <Remove onClick={onRemove}>\r\n            <MdDelete />\r\n        </Remove>\r\n    </ToDoItemBlock>\r\n  );\r\n}\r\n\r\n\r\nexport default React.memo(ToDoItem);\r\n","import React, { useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport ToDoItem from './ToDoItem';\r\nimport { useTodoState } from '../ToDoContext';\r\n\r\nconst ToDoListBlock = styled.div`\r\n    flex: 1; \r\n    padding: 20px 32px;\r\n    padding-bottom: 48px;\r\n    overflow-y: auto;\r\n`;\r\n\r\n//line7 : 부모 컴포넌트 컨텐츠 전체 차지\r\n//line10 : 항목 많아지면 스크롤바 자동생성\r\n\r\n\r\n\r\nfunction ToDoList() {\r\n  const todos = useTodoState();\r\n\r\n  useEffect(() => {localStorage.setItem(\"todoLS\", JSON.stringify(todos))\r\n  },[todos]);\r\n\r\n  useEffect(() => {\r\n      localStorage.todoLS = JSON.stringify(todos);\r\n  },[todos]);\r\n\r\n  const filterType = localStorage.getItem('FilteredLS');\r\n\r\n  const renderTodoList = (filterType) => {\r\n    let newTodo;\r\n    switch(filterType) {\r\n       case 'ORIGIN':\r\n         newTodo = todos;\r\n         break;\r\n       case 'UNDONE':\r\n         newTodo = todos.filter(todo => todo.filterType === true);\r\n         break;\r\n       case 'DONE':\r\n         newTodo = todos.filter(todo => todo.filterType === true);\r\n         break;\r\n       default:\r\n         newTodo = todos;\r\n    } \r\n    return (\r\n     <ToDoListBlock>\r\n       {newTodo.map(todo => (\r\n         <ToDoItem\r\n           id={todo.id}\r\n           text={todo.text}\r\n           done={todo.done}\r\n           key={todo.id}\r\n         />\r\n       ))}\r\n     </ToDoListBlock>\r\n   );\r\n } \r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n    {renderTodoList(filterType)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToDoList;","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoNextId , useTodoDispatch } from '../ToDoContext';\r\n\r\n\r\n\r\nconst CircleButton = styled.button`\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  font-size: 60px;\r\n\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%);\r\n  color: white;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n \r\n  transition: 0.125s all ease-in;\r\n  ${props =>\r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\n//line18: 요소 배치 수직 순서 결정\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding-left: 32px;\r\n  padding-top: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 72px;\r\n\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\n\r\nfunction ToDoCreate() {\r\n    const [open, setOpen] = useState(false);\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();\r\n\r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = e => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n      e.preventDefault();\r\n      dispatch({\r\n        type: 'CREATE',\r\n        todo: {\r\n          id: nextId.current,\r\n          text: value,\r\n          done: false,\r\n          filterType: false\r\n        }\r\n      });\r\n      nextId.current += 1;\r\n      setOpen(false);\r\n      setValue('');\r\n    };\r\n    return (\r\n        <>\r\n        {open && (\r\n            <InsertFormPositioner>\r\n                <InsertForm onSubmit={onSubmit}>\r\n                    <Input\r\n                    autoFocus\r\n                    placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\r\n                    onChange={onChange}\r\n                    value={value}\r\n                    ></Input>\r\n                </InsertForm>\r\n            </InsertFormPositioner>\r\n        )}\r\n        <CircleButton onClick={onToggle} open={open}>\r\n            <MdAdd />      \r\n        </CircleButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(ToDoCreate);","import React from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport ToDoTemplate from './components/ToDoTemplate'\r\nimport ToDoHead from './components/ToDoHead';\r\nimport ToDoList from './components/ToDoList';\r\nimport ToDoCreate from './components/ToDoCreate';\r\nimport { ToDoProvider} from './ToDoContext';\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: #e9ecef;\r\n  }\r\n`;\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <ToDoProvider>\r\n      <GlobalStyle />\r\n      <ToDoTemplate>\r\n        <ToDoHead />\r\n        <ToDoList />\r\n        <ToDoCreate />\r\n      </ToDoTemplate>\r\n    </ToDoProvider>\r\n  );\r\n}\r\n\r\n//context API 사용하기위해 ToDoProvider로 감싸준다\r\n//chidren 최대한 안쓰고 각 컴포넌트로 관리 \r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}